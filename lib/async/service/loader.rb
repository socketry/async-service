module Async
	module Service
	# The domain specific language for loading configuration files.
		class Loader
			# Initialize the loader, attached to a specific configuration instance.
			# Any environments generated by the loader will be added to the configuration.
			# @parameter configuration [Configuration]
			# @parameter root [String] The file-system root path for relative path computations.
			def initialize(configuration, root = nil)
				@loaded = {}
				@configuration = configuration
				@environments = {}
				@root = root
			end
			
			# The file-system root path which is injected into the environments as required.
			# @attribute [String]
			attr :root
			
			# The attached configuration instance.
			# @attribute [Configuration]
			attr :configuration
			
			# Load the specified file into the given configuration.
			# @parameter configuration [Configuration]
			# @oaram path [String] The path to the configuration file, e.g. `falcon.rb`.
			def self.load_file(configuration, path)
				path = File.realpath(path)
				root = File.dirname(path)
				
				loader = self.new(configuration, root)
				
				loader.instance_eval(File.read(path), path)
			end
			
			# Load specific features into the current configuration.
			#
			def load(*features)
				features.each do |feature|
					next if @loaded.include?(feature)
					
					case feature
					when Symbol
						relative_path = File.join(__dir__, "environments", "#{feature}.rb")
						
						self.instance_eval(File.read(relative_path), relative_path)
						
						@loaded[feature] = relative_path
					when Module
						feature.load(self)
						
						@loaded[feature] = feature
					else
						raise LoadError, "Unsure about how to load #{feature}!"
					end
				end
			end
			
			# Add the named environment, with zero or more parent environments, defined using the specified `block`.
			# @parameter name [String] The name of the environment.
			# @parameter parents [Array(Symbol)] The names of the parent environments to inherit.
			# @yields {...} The block that will generate the environment.
			def environment(name, *parents, &block)
				raise KeyError.new("#{name} is already set", key: name) if @environments.key?(name)
				@environments[name] = merge(name, *parents, &block)
			end
			
			# Define a host with the specified name.
			# Adds `root` and `authority` keys.
			# @parameter name [String] The name of the environment, usually a hostname.
			def host(name, *parents, &block)
				environment = merge(name, *parents, &block)
				
				environment[:root] = @root
				environment[:authority] = name
				
				@configuration.add(environment.flatten)
			end
			
			# Define a proxy with the specified name.
			# Adds `root` and `authority` keys.
			# @parameter name [String] The name of the environment, usually a hostname.
			def proxy(name, *parents, &block)
				environment = merge(name, :proxy, *parents, &block)
				
				environment[:root] = @root
				environment[:authority] = name
				
				@configuration.add(environment.flatten)
			end
			
			# Define a rack application with the specified name.
			# Adds `root` and `authority` keys.
			# @parameter name [String] The name of the environment, usually a hostname.
			def rack(name, *parents, &block)
				environment = merge(name, :rack, *parents, &block)
				
				environment[:root] = @root
				environment[:authority] = name
				
				@configuration.add(environment.flatten)
			end
			
			# Define a supervisor instance
			# Adds `root` key.
			def supervisor(&block)
				name = File.join(@root, "supervisor")
				environment = merge(name, :supervisor, &block)
				
				environment[:root] = @root
				
				@configuration.add(environment.flatten)
			end
				
			private
			
			# Build a new environment with the specified name and the given parents.
			# @parameter name [String]
			# @parameter parents [Array(Build::Environment)]
			# @yields {...} The block that will generate the environment.
			def merge(name, *parents, &block)
				environments = parents.map{|name| @environments.fetch(name)}
				
				parent = Build::Environment.combine(*environments)
				
				Build::Environment.new(parent, name: name, &block)
			end
		end
	end
end
